@library:'../rules/library.sch';

@params:'<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:saxon="http://saxon.sf.net/" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xs saxon" version="2.0"> <xsl:param name="currentElementLocation"/> <xsl:template match="/"> <xsl:apply-templates select="node()"/> </xsl:template> <xsl:template match="@class"/> <xsl:template match="dl"> <xsl:variable name="pattern" select="normalize-space(dlhead/ddhd)" as="xs:string"/> <xsl:copy> <xsl:apply-templates select="dlhead | @*"/> <xsl:apply-templates select="document(resolve-uri(\'@{library}\', base-uri(/)))//*:pattern[@id=$pattern]/*:parameters/*" mode="sch"> <xsl:with-param name="rule" select="."/> </xsl:apply-templates> </xsl:copy> </xsl:template> <xsl:template match="node() | @*"> <xsl:copy> <xsl:apply-templates select="node() | @*"/> </xsl:copy> </xsl:template> <xsl:template match="*:parameter" mode="sch"> <xsl:param name="rule"/> <xsl:variable name="name" select="*:name"/> <xsl:variable name="q">"</xsl:variable> <xsl:variable name="a">\'</xsl:variable> <xsl:variable name="empty"/> <dlentry> <dt><xsl:value-of select="$name"/></dt> <dd> <xsl:variable name="value" select="$rule/dlentry/dt[.=$name]/following-sibling::dd/node()[not(self::processing-instruction())]"/> <xsl:choose> <xsl:when test="$value!=$empty"> <xsl:copy-of select="$value"/> </xsl:when> <xsl:otherwise> <xsl:processing-instruction name="oxy-placeholder"> <xsl:text>content="</xsl:text> <xsl:value-of select="replace(normalize-space(*:desc), $q, $a)"/> <xsl:text>"</xsl:text></xsl:processing-instruction> </xsl:otherwise> </xsl:choose> </dd> </dlentry> </xsl:template> </xsl:stylesheet>';

@import "rulesAndDescriptions.less";

p:empty:after {
 color:gray;
 content: "Type content or " 
 		oxy_button(
 			action,
		 		oxy_action(
		          name, '[Add rule]', 
		          description, 'Insert a rule', 
		          operation, 'ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation', 
		          arg-fragment, '<dl audience="rules"><dlhead><dthd>Rule</dthd><ddhd/></dlhead><dlentry><dt/><dd/></dlentry></dl>',
		          arg-insertLocation, '.',
				),
			transparent, true);
}

*[audience~='rules'] ddhd {
 content:oxy_combobox( 
            edit, '#text',
            editable, false,
            values, oxy_xpath("string-join((doc('@{library}')//*:pattern[@abstract]/@id), ', ')"),
            tooltips, oxy_xpath("string-join((doc('@{library}')//*:pattern[@abstract]/*:title/normalize-space()), ', ')")
	);
	visibility:-oxy-collapse-text;
}

@media oxygen AND (platform:"webapp") {
	*[audience~='rules'] ddhd {
	 content:oxy_combobox( 
	            edit, '#text',
	            editable, false,
	            values, '@{rules}',
	            tooltips, '@{descriptions}'
		);
		visibility:-oxy-collapse-text;
	}    
}


*[audience~='rules'] ddhd:not(:empty) {
	content:"";
	visibility:visible;
}
*[audience~='rules']  ddhd:not(:empty):after {
	content:" "
		oxy_button(
 			action,
		 		oxy_action(
		          name, '[Add parameters]', 
		          description, 'Insert rule paremeters', 
		          operation, 'ro.sync.ecss.extensions.commons.operations.XSLTOperation', 
		          arg-sourceLocation, 'ancestor::dl',
		          arg-targetLocation, 'ancestor::dl',
		          arg-script, '@{params}',
		          arg-action, 'Replace'
				),
			transparent, true);
	
	
	
	;
}


@media oxygen AND (platform:"webapp") {
	*[audience~='rules']  ddhd:not(:empty):after {
	content:" "
		oxy_button(
 			action,
		 		oxy_action(
		          name, '[Add parameters]', 
		          description, 'Insert rule paremeters', 
		          operation, 'ro.sync.ecss.extensions.commons.operations.XSLTOperation', 
		          arg-sourceLocation, 'ancestor::dl',
		          arg-targetLocation, 'ancestor::dl',
		          arg-script, '@{staticParams}',
		          arg-action, 'Replace'
				),
			transparent, true);
	
	;
}
}


/* Rendering */

*[audience~='rules'] dl,
dl[audience~='rules']{
    display:table;
}


*[audience~='rules'] dl:after,
dl[audience~='rules']:after {
    display:block;
    content :
        oxy_button(
         action,
		 		oxy_action(
		          name, 'Delete rule', 
		          icon, '/images/Remove16.png'
		          description, 'Delete rule', 
		          operation, 'ro.sync.ecss.extensions.commons.operations.DeleteElementOperation' 
				),
         transparent, true, enableInReadOnlyContext, true)
    ;
}
*[audience~='rules'] dlhead,
*[audience~='rules'] dlentry {
    display:table-row;
}

*[audience~='rules'] dthd,
*[audience~='rules'] ddhd,
*[audience~='rules'] dt, 
*[audience~='rules'] dd {
    display :table-cell;
    padding:0.2em;    
}

*[audience~='rules'] dthd,
*[audience~='rules'] ddhd {
    background-color:#DDEEFF;
}

*[audience~='rules'] dt,
*[audience~='rules'] dd {
    background-color:#FAFCFF;
}

*[audience~='rules'] dt {
    width:30%;
    padding-left:2%;
}

*[audience~='rules'] dl,
dl[audience~='rules']
{
    -oxy-editable:false;
}

*[audience~='rules'] dd,
*[audience~='rules'] ddhd{
    -oxy-editable:true;
}


*[audience~='rules'] dd {
    width:60%;
}

*[audience~='rules'] dthd,
*[audience~='rules'] ddhd,
*[audience~='rules'] dt,
*[audience~='rules'] dd {
    border : 1px solid #EEEEEE;
}

*[audience~='rules'] dt:hover,
*[audience~='rules'] dd:hover,
*[audience~='rules'] dthd:hover,
*[audience~='rules'] ddhd:hover{
    border : 1px solid gray;
}

*[audience~='rules'] dt:focus,
*[audience~='rules'] dd:focus,
*[audience~='rules'] dthd:focus,
*[audience~='rules'] ddhd:focus{
    border : 1px solid blue;
}