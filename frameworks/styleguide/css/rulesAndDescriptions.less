@rules:'avoidWordInElement, avoidEndFragment, avoidAttributeInElement, recommendElementInParent, restrictWords, restrictCharacters, restrictNesting, restrictNumberOfChildren, restrictChildrenElements, avoidDuplicateContent, requireContentAfterElement, dita-allowedElementsForClass, dita-allowOnlyBlockElements';
@descriptions:'Issue a warning if a word or a phrase appears inside a specified element, Issue a warning if a an element end with a specified fragment or character, Issue a warning if an attribute appears inside a specified element, Recommend usage of an element inside a parent element, Check the number of words to be within certain limits, Check the number of characters to be within certain limits, Restrict nesting levels for an element, Restrict the number of children elements in a parent element, Restrict the elements that can appear inside a parent element, Avoid having two elements with the same content, Check that we still have some text content following a specified element., Check element names for a DITA element that has a specified class value, Allow only DITA block elements inside an element';
@staticParams:'<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:saxon="http://saxon.sf.net/" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xs saxon" version="2.0"> <xsl:param name="currentElementLocation"/> <xsl:variable name="lib"> <rules xmlns="http://oxygenxml.com/ns/schematron/params"> <pattern id="avoidWordInElement"> <parameters> <parameter> <name>element</name> <desc>Specifies the element we will verify to not contain a specified word. You can specify multiple elements if you separate them using a pipe character, for example title|p will check both title and p elements.</desc></parameter><parameter> <name>word</name> <desc>Specifies the word or phrase we will look for.</desc></parameter><parameter> <name>message</name> <desc>The message the end user will see when the specified word appears in the specified element.</desc></parameter> </parameters> </pattern><pattern id="avoidEndFragment"> <parameters> <parameter> <name>element</name> <desc>Specifies the element we will verify to not contain a specified word.</desc></parameter><parameter> <name>fragment</name> <desc>Specifies the text to check.</desc></parameter><parameter> <name>message</name> <desc>The message the end user will see when the specified text ends with the given fragment.</desc></parameter> </parameters> </pattern><pattern id="avoidAttributeInElement"> <parameters> <parameter> <name>element</name> <desc>Specifies the element we will verify to not contain a specified word.</desc></parameter><parameter> <name>attribute</name> <desc>Specifies the forbidden attribute.</desc></parameter><parameter> <name>message</name> <desc>The message the end user will see when the forbidden attribute is encountered.</desc></parameter> </parameters> </pattern><pattern id="recommendElementInParent"> <parameters> <parameter> <name>parent</name> <desc>Specifies the parent element.</desc></parameter><parameter> <name>element</name> <desc>Specifies the element that should appear in the parent.</desc></parameter><parameter> <name>message</name> <desc>The message the end user will see when recommended child is not found in the parent.</desc></parameter> </parameters> </pattern><pattern id="restrictWords"> <parameters> <parameter> <name>parentElement</name> <desc>Specifies the element who\'s word number should be counted.</desc></parameter><parameter> <name>minWords</name> <desc>Specifies the minimum number of words that is accepted.</desc></parameter><parameter> <name>maxWords</name> <desc>Specifies the maximum number of words that is accepted.</desc></parameter><parameter> <name>message</name> <desc>An additional message we should display to the user in case the number of words is not within the specified limits.</desc></parameter> </parameters> </pattern><pattern id="restrictCharacters"> <parameters> <parameter> <name>parentElement</name> <desc>Specifies the element who\'s number of characters should be counted.</desc></parameter><parameter> <name>minChars</name> <desc>Specifies the minimum number of characters that is accepted.</desc></parameter><parameter> <name>maxChars</name> <desc>Specifies the maximum number of characters that is accepted.</desc></parameter><parameter> <name>normalize</name> <desc>Set this to "true" or "yes" if you want the characters to be counted after normalizing the content of the element.</desc></parameter><parameter> <name>message</name> <desc>An additional message we should display to the user in case the number of characters is not within the specified limits.</desc></parameter> </parameters> </pattern><pattern id="restrictNesting"> <parameters> <parameter> <name>element</name> <desc>Specifies the element that we should check for nesting.</desc></parameter><parameter> <name>maxNestingLevel</name> <desc>Specifies the maximum nesting level allowed for the specified element. In case the number of ancestors of the same type is larger than this a warning will be displayed to the user.</desc></parameter><parameter> <name>message</name> <desc>The message that should be presented to the user if the maximum nesting level is exceeded.</desc></parameter> </parameters> </pattern><pattern id="restrictNumberOfChildren"> <parameters> <parameter> <name>parentElement</name> <desc>Specifies the element that we should check for nesting.</desc></parameter><parameter> <name>element</name> <desc>Specifies the element we will look for as child element.</desc></parameter><parameter> <name>min</name> <desc>The minimum number of occurrences allowed.</desc></parameter><parameter> <name>max</name> <desc>The maximum number of occurrences allowed.</desc></parameter><parameter> <name>message</name> <desc>A message we should present to the user in case the number of children elements is not within the specified limits.</desc></parameter> </parameters> </pattern><pattern id="restrictChildrenElements"> <parameters> <parameter> <name>parentElement</name> <desc>Specifies the parent element.</desc></parameter><parameter> <name>allowedChildren</name> <desc>Specifies a comma separated list of element local names.</desc></parameter><parameter> <name>message</name> <desc>An additional message we should display to the user in case the matched element contains children that are not in the list of allowed elements.</desc></parameter> </parameters> </pattern><pattern id="avoidDuplicateContent"> <parameters> <parameter> <name>matchElement</name> <desc>Specifies the element to check.</desc></parameter><parameter> <name>targetElement</name> <desc>Specifies a sibling element name to check against.</desc></parameter><parameter> <name>message</name> <desc>A message we should display to the user in case the matched element contains the same content as the target.</desc></parameter> </parameters> </pattern><pattern id="requireContentAfterElement"> <parameters> <parameter> <name>element</name> <desc>Specifies the element to check.</desc></parameter><parameter> <name>message</name> <desc>A message we should display to the user in case there is no content after the reference element.</desc></parameter> </parameters> </pattern><pattern id="dita-allowedElementsForClass"> <parameters> <parameter> <name>elementClass</name> <desc>Specifies the DITA class value of the element that we should check.</desc></parameter><parameter> <name>allowedElementNames</name> <desc>Specifies a comma separated list of element local names.</desc></parameter><parameter> <name>message</name> <desc>An additional message we should display to the user in case the matched element is not found in the list of allowed elements.</desc></parameter> </parameters> </pattern><pattern id="dita-allowOnlyBlockElements"> <parameters> <parameter> <name>element</name> <desc>Specifies the DITA element that we should check to contain only block elements.</desc></parameter><parameter> <name>message</name> <desc>The message we should display to the user in case the specified element contains text or inline elements.</desc></parameter> </parameters> </pattern></rules> </xsl:variable><xsl:template match="/"> <xsl:apply-templates select="node()"/> </xsl:template> <xsl:template match="@class"/> <xsl:template match="dl"> <xsl:variable name="pattern" select="normalize-space(dlhead/ddhd)" as="xs:string"/> <xsl:copy> <xsl:apply-templates select="dlhead | @*"/> <xsl:apply-templates select="$lib//*:pattern[@id=$pattern]/*:parameters/*" mode="sch"> <xsl:with-param name="rule" select="."/> </xsl:apply-templates> </xsl:copy> </xsl:template> <xsl:template match="node() | @*"> <xsl:copy> <xsl:apply-templates select="node() | @*"/> </xsl:copy> </xsl:template> <xsl:template match="*:parameter" mode="sch"> <xsl:param name="rule"/> <xsl:variable name="name" select="*:name"/> <xsl:variable name="q">"</xsl:variable> <xsl:variable name="a">\'</xsl:variable> <xsl:variable name="empty"/> <dlentry> <dt><xsl:value-of select="$name"/></dt> <dd> <xsl:variable name="value" select="$rule/dlentry/dt[.=$name]/following-sibling::dd/node()[not(self::processing-instruction())]"/> <xsl:choose> <xsl:when test="$value!=$empty"> <xsl:copy-of select="$value"/> </xsl:when> <xsl:otherwise> <xsl:processing-instruction name="oxy-placeholder"> <xsl:text>content="</xsl:text> <xsl:value-of select="replace(normalize-space(*:desc), $q, $a)"/> <xsl:text>"</xsl:text></xsl:processing-instruction> </xsl:otherwise> </xsl:choose> </dd> </dlentry> </xsl:template> </xsl:stylesheet>';